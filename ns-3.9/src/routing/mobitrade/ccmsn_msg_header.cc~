 
#include "ccmsn_msg_header.h"
#include "ns3/socket-factory.h"
#include "ns3/udp-socket-factory.h"
#include "ns3/simulator.h"

#include "ns3/random-variable.h"
#include "ns3/inet-socket-address.h"
#include "ns3/ipv4-route.h"
#include "ns3/boolean.h"
#include "ns3/uinteger.h"
#include "ns3/enum.h"
#include "ns3/trace-source-accessor.h"
#include "ns3/ipv4-header.h"
#include "ns3/address-utils.h"

#include "ns3/config.h"
#include "ns3/udp-header.h"

using namespace std;
namespace ns3{

NS_LOG_COMPONENT_DEFINE ("ns3::CCMSNMsgHeader");
NS_OBJECT_ENSURE_REGISTERED (CCMSNMsgHeader);

CCMSNMsgHeader::CCMSNMsgHeader ()
{
}

CCMSNMsgHeader::~CCMSNMsgHeader ()
{
}

TypeId CCMSNMsgHeader::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::CCMSNMsgHeader").SetParent<Header> ().AddConstructor<CCMSNMsgHeader> ();
  return tid;
} 

uint32_t CCMSNMsgHeader::GetSerializedSize (void) const
{
  return sizeof(msgType) + sizeof(contentSource) + sizeof(msgTTL);
}

void CCMSNMsgHeader::Serialize (Buffer::Iterator start) const
{
  Buffer::Iterator i = start;
  i.WriteHtonU16 (msgType);
  i.WriteU32 (contentSource.Get());
  i.WriteHtonU32 (msgTTL);
  i.WriteU32 (destAddress.Get());
}

uint32_t CCMSNMsgHeader::Deserialize (Buffer::Iterator start)
{
  Buffer::Iterator i = start;
  
  msgType = i.ReadNtohU16 ();
  contentSource = (Ipv4Address)i.ReadU32 ();
  msgTTL = i.ReadNtohU32 ();
  destAddress = (Ipv4Address)i.ReadU32 ();
  return i.GetDistanceFrom (start);
}

TypeId CCMSNMsgHeader::GetInstanceTypeId (void) const
{
  return GetTypeId ();
}

void CCMSNMsgHeader::Print (std::ostream &os) const
{

}
}
